#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : Système
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x1288528b00045c65
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  internal_properties : CAAAAAgAAACWrUzFQKgxQSqMZNK/Yi3WKAxMcGwl7Ybk90NoARiCZrOTs9x8QlMy9XqznonipL5qQo640sVVfh8U69wR1o4nezRIFgrtlAJ/R62jYDxX+01l/Hs6+bAGS8ce0oiSw4oUnfTdr+SK4zY7P0idAQ1Ysq/Cuj2yNnaF89iSr0t8tzBkj3DTTZ64Z2hDSBP79cD//bHBI2UP5l39spiw+hOx7gUNQRiXPApbjLQk83o3Z1UcYZOd6yx96Jgq5GzVPr4wNdFVC9V8iLGO0E3s2VapTY+XbR9BxTrK/xCYZ01NDsb3w/X+nGDqdaStUK/IAnhPtNus
  type_code : 31
  p_codes :
   -
     internal_properties : CAAAAAgAAADN5eWzItxQX75jWFrPEvz4t2PAXysz4kZFgRV5ILKWRLgtENSZmGM50K/ugDsCLs/AN4SNU8NRo5mkt+wYaw+7qkeY1qd7U0d8RL9XIAramTygkvbSnc90iiQQndp+WvSSfbefq4dzpDldO8++Vp1Zu6Knja1WIMc1fiGKswB6
     code : |1-
      extern "winconst.wl"
      CONSTANT
      	// ------------------------------------------
      	// 		PARTAGE DE REPERTOIRE
      	// ------------------------------------------
      	PARTAGE_LECTURESEULE 	=  0x0001 
      	PARTAGE_TOTAL 			= 0x0002
      	
      	PARTAGE_PERSISTANT 		= 0x0100 	
      	PARTAGE_INVISIBLE 		= 0x0100
      	
      	PARTAGE_REPERTOIRE 	= 0
      	PARTAGE_IMPRIMANTE 		= 1
      	
      	NERR_DuplicateShare			= 2118
      	NERR_RedirectedPath			= 2117
      	NERR_UnknownDevDir			= 2116
      	ERROR_ACCESS_DENIED		= 0x5
      	ERROR_INVALID_LEVEL		= 0x7C
      	ERROR_INVALID_NAME			= 0x7B
      	ERROR_INVALID_PARAMETER 	= 0x57
      
      	
      	// -------------------------------------------
      	// 		CORBEILLE
      	// -------------------------------------------
      	CORBEILLE_SANSCONFIRMATION = 0x00000001 
      	CORBEILLE_SANSJAUGE 		 = 0x00000002 
      	CORBEILLE_SANSSON 			 = 0x00000004 
      
      
      	// -------------------------------------------
      	// 		PAPIER PEINT
      	// -------------------------------------------
      	
      	SPI_SETDESKWALLPAPER 	= 20
      	SPIF_UPDATEINIFILE 		= 0x1
      	
      	
      	
      	// -------------------------------------------
      	// 		MODIFIER LE CURSEUR D'UN CHAMP
      	// -------------------------------------------
      	LR_LOADFROMFILE 	= 0x10
      	IMAGE_BITMAP 		= 0
      	IMAGE_ICON 			= 1
      	IMAGE_CURSOR 		= 2
      	
      	
      	// ------------------------------------------------------
      	// 		CACHER UNE APPLICATION DU GESTIONNAIRE DES TACHES
      	// ------------------------------------------------------
      	RSP_SIMPLE_SERVICE 		= 1
      	RSP_UNREGISTER_SERVICE 	= 0
      	GWL_EXSTYLE 			= -20
      	WS_EX_TOOLWINDOW 		= 0x80
      		
      	WS_SYSMENU	= 0x80000
      	WS_POPUP 	= 0x80000000
      	WS_BORDER 	= 0x800000
      	WS_VISIBLE 	= 0x10000000
      	
      	WS_POPUPWINDOW = (WS_POPUP + WS_BORDER + WS_SYSMENU)
      	GWL_STYLE= -16
      	
      	
      FIN
      
      
      // ------------------------------------------
      // 		PARTAGE DE REPERTOIRE
      // ------------------------------------------
      STSHARE_INFO_50 est une structure
      	sNomPartage 				est une chaine ASCIIZ sur 13
      	nType 					est un entier sur 2
      	nFlags 					est un entier systeme
      	nAdresseDescription 		est un entier systeme
      	nAdresseChemin 			est un entier systeme
      	sMotPasseLectureEcriture 	est une chaine ASCIIZ sur 9
      	sMotPasseLectureSeule 		est une chaine ASCIIZ sur 9
      FIN
      STSHARE_INFO_2 est une structure
      	sNomPartage 		est entier systeme
      	nType 			est un entier systeme
      	sRemarque 		est un entier systeme
      	nPermission 		est un entier systeme
      	nMaxConnection 	est un entier systeme
      	nConnectionEnCours 	est un entier systeme
      	nAdresseChemin 		est un entier systeme
      	sMotDePasse 		est un entier systeme
      FIN
      
      // ------------------------------------------
      // 		NOMBRE D'ECRANS
      // ------------------------------------------
      
      RECT est une structure
      	nGauche est un entier
      	nHaut 	est un entier
      	nDroite 	est un entier
      	nBas 	est un entier	
      FIN
      
      MONITORINFO est une structure
      	nTaille 	est un entier
      	rcMontiteur est un RECT
      	rcTravail 	est un RECT
      	dwFlags 	est un entier
      FIN
      
      
      // ------------------------------------------
      // 		TEMPS D'INACTIVITE
      // ------------------------------------------
      
      STLASTINPUTINFO est une structure
      	nTaille est un entier
      	nTemps	est un entier
      FIN
      
      
      // ------------------------------------------
      // 		ENUMERATION DES FENÊTRES
      // ------------------------------------------
      
      gsChaineRetour est une chaine		// Chaîne renvoyée par la fonction
      
      // ------------------------------------------
      // 		CHANGER LE CARET D'UN CHAMP
      // ------------------------------------------
      
      gbPassageWindows 	est un booléen			// Variable utilisée pour savoir si l’événement SetFocus a été géré par Windows
      gsFichierImageCaret est une chaine			// Nom du fichier image du caret
      gnIDEvenement 		est un entier = 0		// Identifiant de l’événement
      
      gnCodeErr			est un entier			// Mémorisation du code d'erreur
     type : 720896
  procedures :
   -
     name : PartageRépertoire
     internal_properties : CAAAAAgAAACKJa82zzxBUN2n44ZeGxuc16V0T2QPNw1aAHEfk9je0Fp2PmzkjkJB1he4nxDfaaul0mLOHALNgPxd3Iig8hQYU/77GTZ4uloFcpJf81gZP1bEJi0CBLPkU66+f5jsgNl9wOJBDVMf7E0OxKhTfFdGRYfigleNUFOZtBY1ak33clc92KXpq+43kpWic9JF8PYIyFwM9J2N4cGCszjHmxXoBHwH8A==
     procedure_id : 1335408175318750010
     type_code : 15
     code : |1-
      // Syntaxe :
      //[ <Résultat> = ] PartageRépertoire (<sCheminRépertoire>, <sNomPartage>, <sLibelléPartage>, <sPassword> [, <nDroits> [, <nFlags> [, <nType>]]])
      //
      // Paramètres :
      //	sCheminRépertoire : Chemin du répertoire à supprimer
      //	sNomPartage : Le nom du partage à créer
      //	sLibelléPartage : Le commentaire du partage
      //	sPassword : Mot de passe
      //	nDroits (valeur par défaut=1) : Les droits (PARTAGE_LECTURESEULE, PARTAGE_TOTAL)
      //	nFlags (valeur par défaut=256) : Le partage est persistant ? (PARTAGE_PERSISTANT)
      //	nType (valeur par défaut=0) : Le type de partage PARTAGE_REPERTOIRE
      // Valeur de retour :
      // 	booléen : Vrai  si la création a réussi, faux sinon
      
      Procédure PartageRépertoire(sCheminRépertoire,sNomPartage,sLibelléPartage,sPassword,nDroits = PARTAGE_LECTURESEULE,nFlags = PARTAGE_PERSISTANT,nType = PARTAGE_REPERTOIRE)
      // Variables
      sNomDll est une chaine
      nErreur est un entier
      
      selon SysVersionWindows()
      	cas "95","98","ME"
      		sNomDll = "svrapi.dll"
      		MesInfosPartage98 est un STSHARE_INFO_50
      		
      		// -------------------------------------------
      		// RAPPEL DE LA STRUCTURE UTILISEE
      		// -------------------------------------------
      		
      		//SHARE_INFO_50 est une structure
      		//	sNomPartage est une chaine ASCIIZ sur 13
      		//	nType est un entier sur 2
      		//	nFlags est un entier
      		//	nAdresseDescription est un entier
      		//	nAdresseChemin est un entier
      		//	sMotPasseLectureEcriture est une chaine ASCIIZ sur 9
      		//	sMotPasseLectureSeule est une chaine ASCIIZ sur 9
      		//FIN	
      		
      		// Mise à jour des membres de la structure
      		MesInfosPartage98:sNomPartage 				= sNomPartage
      		MesInfosPartage98:nType 					= nType
      		MesInfosPartage98:nAdresseChemin 			= &sCheminRépertoire
      		MesInfosPartage98:nAdresseDescription 		= &sLibelléPartage
      		MesInfosPartage98:nFlags 					= nFlags
      		MesInfosPartage98:sNomPartage 				= sNomPartage
      		MesInfosPartage98:sMotPasseLectureEcriture 	= sPassword
      		MesInfosPartage98:sMotPasseLectureSeule 	= sPassword
      		
      		gnCodeErr = API(sNomDll,"NetShareAdd",null,50,&MesInfosPartage98,dimension(MesInfosPartage98)) 
      		si gnCodeErr<>0 alors 
      			renvoyer faux
      		fin
      		
      	autre cas
      		
      		sNomDll = "netapi32.dll"
      		
      		MesInfosPartageNT est un STSHARE_INFO_2
      		// -------------------------------------------
      		// RAPPEL DE LA STRUCTURE UTILISEE
      		// -------------------------------------------
      //		SHARE_INFO_2 est une structure
      //			sNomPartage 		est entier systeme
      //			nType 				est un entier systeme
      //			sRemarque 			est un entier systeme
      //			nPermission 		est un entier systeme
      //			nMaxConnection 		est un entier systeme
      //			nConnectionEnCours 	est un entier systeme
      //			nAdresseChemin 		est un entier systeme
      //			sMotDePasse 		est un entier systeme
      //		FIN
      		
      		// Déclaration des variables unicode
      		sCheminUnicode		est une chaine unicode
      		sNomUnicode 		est une chaine unicode
      		sMotPasseUnicode 	est une chaine unicode
      		sRemarqueUnicode 	est une chaine unicode
      		si nFlags <> PARTAGE_PERSISTANT ALORS
      			nType += 0x40000000 // Partage temporaire
      		FIN
      		MesInfosPartageNT:nType = nType
      		MesInfosPartageNT:nMaxConnection = -1		// Pas de limite de connexion
      		
      		// Le partage total n'est pas le même en 95,98,ME qu'en NT, XP, 2000....
      		si nDroits = PARTAGE_TOTAL ALORS
      			MesInfosPartageNT:nPermission = 119
      		sinon
      			MesInfosPartageNT:nPermission = nDroits
      		FIN
      		
      		// Mise à jour du chemin à partager
      		sCheminUnicode = AnsiVersUnicode(sCheminRépertoire)
      		MesInfosPartageNT:nAdresseChemin = &sCheminUnicode
      		
      		// Mise à jour du mot de passe
      		sMotPasseUnicode = AnsiVersUnicode(sPassword)
      		MesInfosPartageNT:sMotDePasse = &sMotPasseUnicode
      		
      		// Mise à jour du nom du partage
      		sNomUnicode = AnsiVersUnicode(sNomPartage)
      		MesInfosPartageNT:sNomPartage = &sNomUnicode
      		
      		// Mise à jour des remarques
      		sRemarqueUnicode = AnsiVersUnicode(sLibelléPartage)
      		MesInfosPartageNT:sRemarque = &sRemarqueUnicode
      		
      		gnCodeErr = API(sNomDll, "NetShareAdd", null, 2, &MesInfosPartageNT, &nErreur) 
      		si gnCodeErr <> 0 alors 
      			renvoyer faux
      		fin	
      FIN
      
      renvoyer vrai
     type : 458752
   -
     name : PartageSupprime
     internal_properties : CAAAAAgAAAClxk5QmU4In0XizrcP8Z+y2/ZEqQ7/JLHgILOxO1a4S5O3ZPgKLZErb8jU16aNwQcIFSoXIbKqo5QAL7bxoOkM21A5g4t2sOkdo1skqsgGKSOILIZWyzXfHCutaMXfQx6ggyHgTGwsQwSdfdfizZITOKLFYXY+H9hy+QNmudbib3btOEbCk52xmLj4tx1+qrwklVb3r7Jafj58uG69WVh0XJCXc9N+CH/0PoxxHdhYAI/LCD8=
     procedure_id : 1335428056722404784
     type_code : 15
     code : |1-
      // Syntaxe :
      //[ <Résultat> = ] PartageSupprime (<sNomPartage>)
      //
      // Paramètres :
      //	sNomPartage : 	Le nom du partage à supprimer
      // Valeur de retour :
      // 	booléen : 		VRAI si le partage a été supprimé, FAUX autrement
      
      Procédure PartageSupprime(sNomPartage)
      
      sNomdll 	est une chaine
      nRésultat 	est un entier
      
      // Selon la version de windows, on utilise une dll différente
      selon SysVersionWindows()
      	cas "95","98","ME"
      		
      		sNomdll = "svrapi.dll"	
      		nRésultat = api(sNomdll,"NetShareDel",null,&sNomPartage,0)
      		
      	autres cas
      		sNomdll = "netapi32.dll"
      		sNomPartageUnicode est une chaine unicode
      		
      		sNomPartageUnicode = AnsiVersUnicode(sNomPartage)
      		
      		nRésultat = api(sNomdll,"NetShareDel",null,&sNomPartageUnicode,0)
      FIN
      
      renvoyer nRésultat = 0
     type : 458752
   -
     name : VideCorbeille
     internal_properties : CAAAAAgAAAC97+jw1H1I32FE5XMSo2dpaCFhdX1BSUHxGf3UVadK1CBkCWxmqzL08WToRdj/gqA6cAfLOFLgFyhlWsKGqkKDwnZjcq+9iy9mZFBGRazv3ruBGZnQyurXGxspH7KGBMlcevMNDT8WA1M1B5JhAtFgEsfV8PmPf4qfidEnKHtfXsKPgY8FMzW+nmZxERD7VCXi0Wj/t4al8pBBW9Ga0P30SIw=
     procedure_id : 1335437278017566636
     type_code : 15
     code : |1+
      // Syntaxe :
      //[ <Résultat> = ] VideCorbeille ([<sLecteur>[, <bConfirmation>[, <bJauge>[, <bSon>]]]])
      //
      // Paramètres :
      //	sLecteur : 		Le lecteur dont la corbeille doit être vidée ("" si tous les lecteurs)
      //	bConfirmation : Demande de confirmation ?
      //	bJauge : 		Doit on afficher la jauge ?
      //	bSon : 			Jouer le son pendant la suppression ?
      
      Procédure VideCorbeille(sLecteur = "",bConfirmation=vrai, bJauge=vrai,bSon = faux)
      
      nFlags est un entier
      
      // Calcule le flag utile à la demande de vidage de corbeille
      nFlags = (pas bConfirmation) * CORBEILLE_SANSCONFIRMATION
      nFlags += (pas bJauge) * CORBEILLE_SANSJAUGE
      nFlags += (pas bSon) * CORBEILLE_SANSSON
      
      renvoyer api( "shell32.dll" , "SHEmptyRecycleBinA" , nuLL , &sLecteur , nFlags) = 0
      
     type : 458752
   -
     name : ChangePapierPeint
     internal_properties : CAAAAAgAAACGxzfgJ8RIdZqsLXQD9UeQoEeCH4LR/Vy1qfRozI2oRSItrVPTld387SjdJfzUVneYnYEiapq8wzIoRWlAezq9wIY2b0k35vnm4XeM5DvQ5QqH3mWaHfK35bVSSUQbSJeCP2Hk2+ipvPVwojld
     procedure_id : 1335443179312918033
     type_code : 15
     code : |1-
      // Syntaxe :
      //[ <Résultat> = ] ChangePapierPeint (<sNomFichierPapierPeint>)
      //
      // Cette procédure change le papier peint du bureau
      // Paramètres :
      //	sNomFichierPapierPeint : Le chemin du fichier que l'on souhaite mettre en papier peint
      // Valeur de retour :
      // 	booléen : Vrai si le changement a été effectué, faux sinon
      
      Procédure ChangePapierPeint(sNomFichierPapierPeint)
      
      nResultat est un entier
      
      nResultat = API("user32","SystemParametersInfoA",SPI_SETDESKWALLPAPER,0,&sNomFichierPapierPeint,SPIF_UPDATEINIFILE)
      
      si nResultat = 0 ALORS
      	renvoyer faux
      sinon
      	renvoyer vrai
      FIN
     type : 458752
   -
     name : EnumèreFenêtres
     internal_properties : CAAAAAgAAADAUbSHYYJsb1qQDj5u/3iZw2oANa8u7SrTE1nKVTfSPcRz2iVfITRMZZyEiNO11NgFemczbbUGk1Ocg7/kmJ15PQD4A3+TyJDShdp6xBDfccSgEIfVKoN5p7bPoF8RKQrfH7FflvCjfUHYrqOtU7Bt2Eob5FEkx8hjfP5KSvrowXI+/2T6jHT+NNYcrg/lBx9H8MEHizr1m6jcrn2xmsUHjEByhSeNJl0nj21X0vAWncdMh8TbdTZVGv2Fm7G2qAs/v1RS2QFMPbYGZHojZA==
     procedure_id : 1335523289685215367
     type_code : 15
     code : |1-
      // Syntaxe :
      //[ <Résultat> = ] EnumèreFenêtres ()
      //
      // Cette procédure permet de lister les fenêtres ouvertes sur le poste en cours
      // Elle renvoie une chaine contenant les Handles de ces fenêtres séparées par des RC
      
      Procédure EnumèreFenêtres()
      
      // Vide la chaîne de retour
      gsChaineRetour = ""
      
      // Appel de l'api
      // Le traitement est effectué dans la procédure callback "CallBack_EnumFenêtres"
      API("user32", "EnumWindows" , &CallBack_EnumFenêtres, null)
      
      // On renvoie la chaîne contenant les handles des fenêtres trouvées
      renvoyer gschaineretour
     type : 458752
   -
     name : CallBack_EnumFenêtres
     internal_properties : CAAAAAgAAAAgiJEp2POHxxIdoHafzuMw5zrtU7jBniVI+EwUd+Ou49Lqxg59kmAYivgRkqqTG/18pVfqLV113DfqdrwM4jJYG6+oTXT5BT3ox4nhn9uvm+Rv9FIiVUblvRLd3do73/6ce5w4CezUDxca1bZfue7bQgCGK9VuNVoXxGPrCAhE8VCCtCiVYs8qwO2fHZgcxesLr8pL9sLQ9ucOpBpFaELYjrZmPtbD
     procedure_id : 1335524071369314854
     type_code : 15
     code : |1-
      // Syntaxe :
      //[ <Résultat> = ] CallBack_EnumFenêtres (<nHandleFen> est entier, <nLParam> est entier)
      //
      // Procédure Callback appelée par la fonction EnumèreFenêtres
      
      // Paramètres :
      //	nHandleFen (entier) : 	handle de la fenêtre
      //	nLParam (entier) : 		Pointeur personnalisé
      // Valeur de retour :
      // 	booléen : 				VRAI (pour continuer)
      
      Procédure CallBack_EnumFenêtres(nHandleFen est un entier, nLParam est un entier <utile>)
      
      // On vérifie que la fenêtre est bien visible
      si api("user32","IsWindowVisible" ,nHandleFen) ALORS
      	gsChaineRetour += nHandleFen + rc	
      FIN
      
      // On renvoie vrai pour continuer 
      renvoyer vrai
     type : 458752
   -
     name : ModifieTempsDoubleClic
     internal_properties : CAAAAAgAAACCwx1Ve/TkDV4ur3h3zdNu6BVaZbqXYWhFf9pkyPWgT2b/VQl/e6nocZIbWcDkBgEUryEg+jxbTplBvsCV1PPmozEZrg50GRjBCiDbKcRJXo0CQZhrZvlqWDI3sIm8KfC90pCTCK1ABTrOpj1Z
     procedure_id : 1335529555389844649
     type_code : 15
     code : |1-
      // Syntaxe :
      //[ <Résultat> = ] ModifieTempsDoubleClic (<nNbMilliSecondes> est entier)
      //
      // Paramètres :
      //	nNbMilliSecondes (entier) : 	Le temps en ms entre 2 clics pour que cela soit interprété comme un double clic
      // Valeur de retour :
      // 	booléen :  			VRAI si la fonction a réussi, FAUX sinon
      
      Procédure ModifieTempsDoubleClic(nNbMilliSecondes est un entier)
      
      renvoyer API("user32","SetDoubleClickTime" , nNbMilliSecondes) <> 0
     type : 458752
   -
     name : RécupèreTempsDoubleClic
     internal_properties : CAAAAAgAAADuX8E5H7IsQd6Cvxh/GRs++JFGxeqHGbxVS9pE0MHwF1azcXHnWwGUGda7+egABpm8GxVQWjRFNKNDsDozUv2AxdO3YCQKszbzfIJtT0JLYIeUz1LJDNtAYoz5mud6+zo/bCatDoOSqZ5iytE1
     procedure_id : 1335529830267815343
     type_code : 15
     code : |1-
      // Syntaxe :
      //[ <Résultat> = ] RécupèreTempsDoubleClic ()
      //
      // Cette fonction permet de récupérer le temps entre 2 clics pour que cela soit interprété comme un double clic
      
      Procédure RécupèreTempsDoubleClic()
      
      renvoyer API("user32","GetDoubleClickTime")
     type : 458752
   -
     name : ModifieCaretChamp
     internal_properties : CAAAAAgAAABChlp2EHKwbfSvZYb6Lk/Qkf+UReXdFHnQ3zeuQgiKu+yXbrpwsQqgWFmJ5bgPkv1X6xxk4nfD9uaA4bovpZKK20UUCKdupgUoVFggWZ1n9GOIsFW3jVfuJwoxrgJkFipYaLq/Q9B+yq8BYDNg3HCCphynK8a365Erz+JkTx9ETARss3972zqR+C0EuDyED2SXdKiFF1SS4V1WQaBLBEQz/d2pD0xkgnTKxZaF2dzjvgUn3F594j+xY3GQi06S9rfyMt2idEwg79NoZyVR
     procedure_id : 1335531432290727685
     type_code : 15
     code : |1+
      // Syntaxe :
      //[ <Résultat> = ] ModifieCaretChamp (<sNomChamp>, <sNomFichierIcone> [, <nLargeurIcone> est entier [, <nHauteurIcone> est entier [, <bSetFocus>]]])
      //
      // Paramètres :
      //	sNomChamp : Nom du champ sur lequel on doit appliquer le caret
      //	sNomFichierIcone : le chemin complet du fichier icône
      //	nLargeurIcone (entier - valeur par défaut=16) : Largeur désirée (par défaut 16)
      //	nHauteurIcone (entier - valeur par défaut=16) : Hauteur désirée (par défaut 16)
      //	bSetFocus (valeur par défaut=0) : Paramètre utilisé par la fonction GetFocus_Champ
      // Valeur de retour :
      // 	booléen :     Vrai si la fonction a réussi, faux sinon
      
      Procédure ModifieCaretChamp(sNomChamp,sNomFichierIcone, nLargeurIcone est un entier = 16, nHauteurIcone est un entier = 16,bSetFocus = faux)
      
      nTypeImage 		est un entier
      nHandleImage 	est un entier
      nHandleChamp 	est un entier systeme
      
      // Récupération du Handle
      nHandleChamp = handle(sNomChamp)
      
      // Sauvegarde du nom de l’icône
      gsFichierImageCaret = sNomFichierIcone
      
      // Si l’événement  n'est pas déjà lancé
      si gnIDEvenement = 0 ALORS
      	// on branche l’événement qui va gérer la prise de focus du champ
      	gnIDEvenement = evenement("GetFocus_Champ",sNomChamp,WM_SETFOCUS)
      fin
      
      // On vérifie l'extension de l'image (on ne prend que des BMP, CUR, ICO)
      selon majuscule(fextraitchemin(sNomFichierIcone,fExtension))
      	cas ".BMP"
      		nTypeImage = IMAGE_BITMAP
      		
      		// Chargement de l'image et création du HBITMAP
      		nHandleImage = API("user32","LoadImageA",instance(),&sNomFichierIcone,nTypeImage, nLargeurIcone,nHauteurIcone,LR_LOADFROMFILE)
      		
      	autres cas
      		renvoyer faux
      FIN
      
      si nHandleImage = 0 ALORS
      	renvoyer faux
      FIN
      
      
      // Création du Caret
      si api("user32","CreateCaret",nHandleChamp,nHandleImage,nLargeurIcone,nHauteurIcone) ALORS
      	
      	// si on est pas appelé par l’événement qui gère le setfocus, on renvoie vrai
      	si bSetFocus = faux alors renvoyer vrai	
      	
      	
      	// on est appelé par l’événement qui gère le setFocus, on dessine le caret
      	api("user32","ShowCaret",nHandleChamp)
      	renvoyer vrai
      	
      sinon
      	renvoyer faux
      FIN
     type : 458752
   -
     name : TempsInactivité
     internal_properties : CAAAAAgAAACU7DUgdTFrgZiLFnBdxPkG1UgnriTR8ZWgkDTk/4s2C1JyZlZtKiCQetixmgoTm33kdQ8qRV3NzG+CbkzU2hqwKwfodbRBRXUY54l5nwv/y1zfnBYm2YKheRZByWZ3gypYv1DsDaCAK3OumfI71TJXbjS6b6lSMVYT2JeX9CTYTQw26Bypdts2LEGTqWQIeRpa/GoDMlpMgmeGTI7J6K5CZF3yonJv
     procedure_id : 1335541173277512340
     type_code : 15
     code : |1-
      // Syntaxe :
      //[ <Résultat> = ] TempsInactivité ()
      //
      // Cette procédure permet de connaître le temps d'inactivité sur un poste
      // Renvoie le temps d'inactivité en millisecondes
      
      Procédure TempsInactivité()
      
      MonInfo est un STLASTINPUTINFO
      nTempsActuel est un entier
      
      selon SysVersionWindows()
      	cas "32s","95","98","NT 3.5","NT 4"
      		// L'API appelée n'est disponible qu'à partir de Windows 2000
      		renvoyer 0
      	autres cas
      	// On continue
      FIN
      
      // Mise à jour de la taille de la structure
      MonInfo:nTaille = dimension(MonInfo)
      
      // Récupération du nombre de millisecondes qui s'étaient écoulées lors du dernier mouvement (souris ou clavier) et ce depuis 
      // le démarrage de l'ordinateur
      APi("user32","GetLastInputInfo",&MonInfo)
      
      // récupération du nombre de millisecondes depuis le démarrage
      nTempsActuel = Api("kernel32","GetTickCount")
      
      // Affiche la trace pour l'exemple
      //Trace(chaineconstruit("Il s'est écoulé %1 ms depuis la dernière activité",nTempsActuel - MonInfo:ntemps))
      FEN_Principale.gstexte += chaineconstruit(<§@12884f8e0001b2dc0008§>,nTempsActuel - MonInfo:ntemps) + RC
      
      // Retourne le nombre de ms écoulée depuis le lancement du timer
      renvoyer nTempsActuel - MonInfo:ntemps
     type : 458752
   -
     name : CacheIconeSystemeFilleMDI
     internal_properties : CAAAAAgAAACO0BY6RfDuev01H2YKlcAxli0T4H+x+mpE6tKSrwt4+e+p45LZDyLyDcHoKh6X/+7NlygJglOW4esXkZHh4qDnNcrJkt7DjU74P/9K3eTHNMcqlrKHVXxU4yidKwhEvQYjJf1nj3H5sJJQzjPX1ydGNMqIlBaoqKVdn5Si04Q7+E/TL1X4mvuzWP9xBO8b9hr5m89NDt4u4IsnKM0mtaFxX2sUIQ9o/DOj3y3KUsrHDnknNU4YgDKeJVYpSk2bpDnl9nlBNXa7E/AyWqQ4AeAy0ZDWS6ERccoqqGMJQppch6d4vBo2m3UDipWJqSmrKkVvwsW9j4jNA6vCshmQa8Z08HmF
     procedure_id : 1335792785346106482
     type_code : 15
     code : |1-
      // Syntaxe :
      //[ <Résultat> = ] CacheIconeSystemeFilleMDI (<nHandleFenetre> [, <bGardeFerme>])
      //
      // Cette procédure permet de cacher les boutons système d'une fenêtre fille MDI
      // Paramètres :
      //	nHandleFenetre :					Le handle de la fenêtre fille MDI dont on doit cacher les boutons système
      //	bGardeFerme (valeur par défaut=1) : Doit-on garder le bouton fermer
      
      PROCEDURE CacheIconeSystemeFilleMDI(nHandleFenetre, bGardeFerme = Vrai)
      
      // Modification des attributs d'une fenêtre fille MDI pour ne pas modifier sa taille ou la supprimer
      // GardeFerme=Vrai si garde le bouton de fermeture
      
      LOCAL
      	nStyle	est entier
      	bRes est un booléen
      	
      // Modification des attributs du cadre de la fenêtre
      nStyle = API("User32", "GetWindowLongA", Handle(""), -16)
      
      // -0x1 enlève le bouton maximise
      // -0x2 enlève le bouton iconise
      // -0x8 enlève le menu système 
      // -040 enlève la barre de titre
      // -0x4 enlève les bords de modification de taille
      SI bGardeFerme ALORS
      	nStyle = (PoidsFort(nStyle)-0x1-0x2)*65536 + PoidsFaible(nStyle)
      SINON
      	nStyle = (PoidsFort(nStyle)-0x1-0x8)*65536 + PoidsFaible(nStyle)
      FIN
      // Modification du style de la fenêtre
      bRes = API("User32","SetWindowLongA",Handle(""),-16,nStyle) <> 0
      
      renvoyer (API("User32","SetWindowPos",Handle(""),0,0,0,0,0,0x27)<>0) et bRes
     type : 458752
   -
     name : GetFocus_Champ
     internal_properties : CAAAAAgAAAA+0Hvd4SH6iNFPJkeEB5yYZ71EoFGf5ireZbvDxdj/yU34xt9S8SdzNkKg5/AOm5bTXVIRxEfisQmMThyw8LPHLDKb/HBhgJC3TQDobdYwkNyGPZZITzM2y/vahULbAWygr/kdV47OO9D0/wPjVl33EfbbaozVlKgOhqVqQBG3NTB9XlJvAEFXVppM3yN3IFmUNEPKo9pB8O1gbuRP0y6Orph/t4DX2lj1I72/FgnE/9QNAjvGvt0G909r+gu/FBLU7PLxr5jnYafPPAxQkyk=
     procedure_id : 1335871761209370801
     type_code : 15
     code : |1-
      // Syntaxe :
      //GetFocus_Champ (<nMessage>, <wParam>, <lParam>)
      //
      // Paramètres :
      // 	nMessage : Message Windows (ICI WM_SETFOCUS)
      // 	wParam : 
      // 	lParam : 
      
      Procédure GetFocus_Champ(nMessage,wParam,lParam)
      
      // Au premier passage, il n'y a rien dans les notes
      // Au second passage on rend la main au système
      si gbPassageWindows = VRAI alors retour
      
      // On mets quelque chose dans les notes
      gbPassageWindows = VRAI
      
      // On renvoie l’événement sur le champ
      sendmessage(handle(moimeme..nom),_eve.wMessage,_eve.wParam,_eve.lParam)
      
      // On vide les notes
      gbPassageWindows = faux
      
      // On modifie le curseur du champ 
      // ICI MOIMEME = le champ de saisie
      // car c'est comme si on se trouvait dans le PCode de WM_FOCUS du champ
      ModifieCaretChamp(moimeme..nom,gsFichierImageCaret,*,*,vrai)
      
      // on renvoie faux pour ne pas rendre la main au système
      _eve.Retour = 0
     type : 458752
   -
     name : VideCorbeilleDescripteur
     internal_properties : CAAAAAgAAAA1aNgZEPXo2z0c8Zdyo+cxlJnwkdsHm4dZh8WA91FKJLy+WZxIjQgSTc50qfKBZly6VhNvHhCq/RizuoJEeB7//iC3fiU7HX0eekQKj86zUm+g9ry9JS+6EDLqnhtNuWTdZRxktpavSoj8OKHq2Yarn3biY3ZK9EXYdA6ircaQzUMyGta2ii6hN+n2nIVm9QeIEwbR5VgDRI5z6YMwRtpZwAQ=
     procedure_id : 1582637878861193293
     type_code : 15
     code : |1+
      // Syntaxe :
      //[ <Résultat> = ] VideCorbeilleDescripteur ([<sLecteur>[, <bConfirmation>[, <bJauge>[, <bSon>]]]])
      //
      // Paramètres :
      //	sLecteur : 		Le lecteur dont la corbeille doit être vidée ("" si tous les lecteurs)
      //	bConfirmation : Demande de confirmation ?
      //	bJauge : 		Doit on afficher la jauge ?
      //	bSon : 			Jouer le son pendant la suppression ?
      
      PROCEDURE VideCorbeilleDescripteur(sLecteur = "",bConfirmation=vrai, bJauge=vrai,bSon = faux)
      nFlags est un entier
      
      // Calcule le flag utile à la demande de vidage de corbeille
      nFlags = (PAS bConfirmation) * CORBEILLE_SANSCONFIRMATION
      nFlags += (PAS bJauge) * CORBEILLE_SANSJAUGE
      nFlags += (PAS bSon) * CORBEILLE_SANSSON
      
      DescriptionVideCorbeille est une description d'API
      DescriptionVideCorbeille..NomDLL = "shell32.dll"
      DescriptionVideCorbeille..NomFonction = "SHEmptyRecycleBinA"
      DescriptionVideCorbeille..Paramètre[1]..Type=apiEntierSystème
      DescriptionVideCorbeille..Paramètre[2]..Type=apiEntierSystème
      DescriptionVideCorbeille..Paramètre[3]..Type=apiEntierSystème
      DescriptionVideCorbeille..TypeRetour = apiBooléen
      
      
      RENVOYER DescriptionVideCorbeille(Null , &sLecteur , nFlags) = 0
      
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
resources :
 string_res :
  identifier : 0x12884f8e0001b2dc
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
  strings :
   -
     text :
      fr-FR : user32
     index : 0
   -
     text :
      fr-FR : LockWorkStation
     index : 1
   -
     text :
      fr-FR : "95"
     index : 2
   -
     text :
      fr-FR : svrapi.dll
     index : 3
   -
     text :
      fr-FR : NetShareAdd
     index : 4
   -
     text :
      fr-FR : netapi32.dll
     index : 5
   -
     text :
      fr-FR : NetShareDel
     index : 6
   -
     text :
      fr-FR : Il s'est écoulé %1 ms depuis la dernière activité
     index : 7
   -
     text :
      fr-FR : Il s'est écoulé %1 ms depuis la dernière activité
     index : 8
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
